# Generated from MathExpr.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,42,284,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,
        1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,
        1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,
        1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,
        1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,
        1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,
        1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,
        1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,
        1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,
        1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,34,
        1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,38,1,38,1,38,3,38,
        256,8,38,1,39,4,39,259,8,39,11,39,12,39,260,1,39,1,39,4,39,265,8,
        39,11,39,12,39,266,3,39,269,8,39,1,40,1,40,5,40,273,8,40,10,40,12,
        40,276,9,40,1,41,4,41,279,8,41,11,41,12,41,280,1,41,1,41,0,0,42,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
        49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
        71,36,73,37,75,38,77,39,79,40,81,41,83,42,1,0,5,2,0,69,69,101,101,
        1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,
        0,9,10,13,13,32,32,290,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
        0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
        0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
        0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,
        0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,
        0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,
        0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,
        0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,
        0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,1,85,1,0,0,0,3,87,1,
        0,0,0,5,89,1,0,0,0,7,91,1,0,0,0,9,95,1,0,0,0,11,99,1,0,0,0,13,103,
        1,0,0,0,15,108,1,0,0,0,17,113,1,0,0,0,19,118,1,0,0,0,21,124,1,0,
        0,0,23,129,1,0,0,0,25,134,1,0,0,0,27,139,1,0,0,0,29,145,1,0,0,0,
        31,151,1,0,0,0,33,157,1,0,0,0,35,161,1,0,0,0,37,166,1,0,0,0,39,169,
        1,0,0,0,41,173,1,0,0,0,43,177,1,0,0,0,45,181,1,0,0,0,47,185,1,0,
        0,0,49,191,1,0,0,0,51,197,1,0,0,0,53,203,1,0,0,0,55,208,1,0,0,0,
        57,214,1,0,0,0,59,220,1,0,0,0,61,224,1,0,0,0,63,232,1,0,0,0,65,238,
        1,0,0,0,67,240,1,0,0,0,69,242,1,0,0,0,71,244,1,0,0,0,73,246,1,0,
        0,0,75,248,1,0,0,0,77,255,1,0,0,0,79,258,1,0,0,0,81,270,1,0,0,0,
        83,278,1,0,0,0,85,86,5,40,0,0,86,2,1,0,0,0,87,88,5,41,0,0,88,4,1,
        0,0,0,89,90,5,44,0,0,90,6,1,0,0,0,91,92,5,115,0,0,92,93,5,105,0,
        0,93,94,5,110,0,0,94,8,1,0,0,0,95,96,5,99,0,0,96,97,5,111,0,0,97,
        98,5,115,0,0,98,10,1,0,0,0,99,100,5,116,0,0,100,101,5,97,0,0,101,
        102,5,110,0,0,102,12,1,0,0,0,103,104,5,97,0,0,104,105,5,115,0,0,
        105,106,5,105,0,0,106,107,5,110,0,0,107,14,1,0,0,0,108,109,5,97,
        0,0,109,110,5,99,0,0,110,111,5,111,0,0,111,112,5,115,0,0,112,16,
        1,0,0,0,113,114,5,97,0,0,114,115,5,116,0,0,115,116,5,97,0,0,116,
        117,5,110,0,0,117,18,1,0,0,0,118,119,5,97,0,0,119,120,5,116,0,0,
        120,121,5,97,0,0,121,122,5,110,0,0,122,123,5,50,0,0,123,20,1,0,0,
        0,124,125,5,115,0,0,125,126,5,105,0,0,126,127,5,110,0,0,127,128,
        5,104,0,0,128,22,1,0,0,0,129,130,5,99,0,0,130,131,5,111,0,0,131,
        132,5,115,0,0,132,133,5,104,0,0,133,24,1,0,0,0,134,135,5,116,0,0,
        135,136,5,97,0,0,136,137,5,110,0,0,137,138,5,104,0,0,138,26,1,0,
        0,0,139,140,5,97,0,0,140,141,5,115,0,0,141,142,5,105,0,0,142,143,
        5,110,0,0,143,144,5,104,0,0,144,28,1,0,0,0,145,146,5,97,0,0,146,
        147,5,99,0,0,147,148,5,111,0,0,148,149,5,115,0,0,149,150,5,104,0,
        0,150,30,1,0,0,0,151,152,5,97,0,0,152,153,5,116,0,0,153,154,5,97,
        0,0,154,155,5,110,0,0,155,156,5,104,0,0,156,32,1,0,0,0,157,158,5,
        97,0,0,158,159,5,98,0,0,159,160,5,115,0,0,160,34,1,0,0,0,161,162,
        5,115,0,0,162,163,5,113,0,0,163,164,5,114,0,0,164,165,5,116,0,0,
        165,36,1,0,0,0,166,167,5,108,0,0,167,168,5,110,0,0,168,38,1,0,0,
        0,169,170,5,108,0,0,170,171,5,111,0,0,171,172,5,103,0,0,172,40,1,
        0,0,0,173,174,5,101,0,0,174,175,5,120,0,0,175,176,5,112,0,0,176,
        42,1,0,0,0,177,178,5,109,0,0,178,179,5,105,0,0,179,180,5,110,0,0,
        180,44,1,0,0,0,181,182,5,109,0,0,182,183,5,97,0,0,183,184,5,120,
        0,0,184,46,1,0,0,0,185,186,5,116,0,0,186,187,5,110,0,0,187,188,5,
        111,0,0,188,189,5,114,0,0,189,190,5,109,0,0,190,48,1,0,0,0,191,192,
        5,115,0,0,192,193,5,110,0,0,193,194,5,111,0,0,194,195,5,114,0,0,
        195,196,5,109,0,0,196,50,1,0,0,0,197,198,5,102,0,0,198,199,5,108,
        0,0,199,200,5,111,0,0,200,201,5,111,0,0,201,202,5,114,0,0,202,52,
        1,0,0,0,203,204,5,99,0,0,204,205,5,101,0,0,205,206,5,105,0,0,206,
        207,5,108,0,0,207,54,1,0,0,0,208,209,5,114,0,0,209,210,5,111,0,0,
        210,211,5,117,0,0,211,212,5,110,0,0,212,213,5,100,0,0,213,56,1,0,
        0,0,214,215,5,103,0,0,215,216,5,97,0,0,216,217,5,109,0,0,217,218,
        5,109,0,0,218,219,5,97,0,0,219,58,1,0,0,0,220,221,5,112,0,0,221,
        222,5,111,0,0,222,223,5,119,0,0,223,60,1,0,0,0,224,225,5,115,0,0,
        225,226,5,105,0,0,226,227,5,103,0,0,227,228,5,109,0,0,228,229,5,
        111,0,0,229,230,5,105,0,0,230,231,5,100,0,0,231,62,1,0,0,0,232,233,
        5,99,0,0,233,234,5,108,0,0,234,235,5,97,0,0,235,236,5,109,0,0,236,
        237,5,112,0,0,237,64,1,0,0,0,238,239,5,43,0,0,239,66,1,0,0,0,240,
        241,5,45,0,0,241,68,1,0,0,0,242,243,5,42,0,0,243,70,1,0,0,0,244,
        245,5,47,0,0,245,72,1,0,0,0,246,247,5,37,0,0,247,74,1,0,0,0,248,
        249,5,94,0,0,249,76,1,0,0,0,250,251,5,112,0,0,251,256,5,105,0,0,
        252,253,5,80,0,0,253,256,5,73,0,0,254,256,7,0,0,0,255,250,1,0,0,
        0,255,252,1,0,0,0,255,254,1,0,0,0,256,78,1,0,0,0,257,259,7,1,0,0,
        258,257,1,0,0,0,259,260,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,
        261,268,1,0,0,0,262,264,5,46,0,0,263,265,7,1,0,0,264,263,1,0,0,0,
        265,266,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,269,1,0,0,0,
        268,262,1,0,0,0,268,269,1,0,0,0,269,80,1,0,0,0,270,274,7,2,0,0,271,
        273,7,3,0,0,272,271,1,0,0,0,273,276,1,0,0,0,274,272,1,0,0,0,274,
        275,1,0,0,0,275,82,1,0,0,0,276,274,1,0,0,0,277,279,7,4,0,0,278,277,
        1,0,0,0,279,280,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,282,
        1,0,0,0,282,283,6,41,0,0,283,84,1,0,0,0,7,0,255,260,266,268,274,
        280,1,6,0,0
    ]

class MathExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    SIN = 4
    COS = 5
    TAN = 6
    ASIN = 7
    ACOS = 8
    ATAN = 9
    ATAN2 = 10
    SINH = 11
    COSH = 12
    TANH = 13
    ASINH = 14
    ACOSH = 15
    ATANH = 16
    ABS = 17
    SQRT = 18
    LN = 19
    LOG = 20
    EXP = 21
    MIN = 22
    MAX = 23
    TNORM = 24
    SNORM = 25
    FLOOR = 26
    CEIL = 27
    ROUND = 28
    GAMMA = 29
    POWE = 30
    SIGM = 31
    CLAMP = 32
    PLUS = 33
    MINUS = 34
    MULT = 35
    DIV = 36
    MOD = 37
    POW = 38
    CONSTANT = 39
    NUMBER = 40
    VARIABLE = 41
    WS = 42

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "','", "'sin'", "'cos'", "'tan'", "'asin'", "'acos'", 
            "'atan'", "'atan2'", "'sinh'", "'cosh'", "'tanh'", "'asinh'", 
            "'acosh'", "'atanh'", "'abs'", "'sqrt'", "'ln'", "'log'", "'exp'", 
            "'min'", "'max'", "'tnorm'", "'snorm'", "'floor'", "'ceil'", 
            "'round'", "'gamma'", "'pow'", "'sigmoid'", "'clamp'", "'+'", 
            "'-'", "'*'", "'/'", "'%'", "'^'" ]

    symbolicNames = [ "<INVALID>",
            "SIN", "COS", "TAN", "ASIN", "ACOS", "ATAN", "ATAN2", "SINH", 
            "COSH", "TANH", "ASINH", "ACOSH", "ATANH", "ABS", "SQRT", "LN", 
            "LOG", "EXP", "MIN", "MAX", "TNORM", "SNORM", "FLOOR", "CEIL", 
            "ROUND", "GAMMA", "POWE", "SIGM", "CLAMP", "PLUS", "MINUS", 
            "MULT", "DIV", "MOD", "POW", "CONSTANT", "NUMBER", "VARIABLE", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "SIN", "COS", "TAN", "ASIN", "ACOS", 
                  "ATAN", "ATAN2", "SINH", "COSH", "TANH", "ASINH", "ACOSH", 
                  "ATANH", "ABS", "SQRT", "LN", "LOG", "EXP", "MIN", "MAX", 
                  "TNORM", "SNORM", "FLOOR", "CEIL", "ROUND", "GAMMA", "POWE", 
                  "SIGM", "CLAMP", "PLUS", "MINUS", "MULT", "DIV", "MOD", 
                  "POW", "CONSTANT", "NUMBER", "VARIABLE", "WS" ]

    grammarFileName = "MathExpr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


