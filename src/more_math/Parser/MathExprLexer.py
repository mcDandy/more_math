# Generated from MathExpr.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,47,318,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,
        1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,
        1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,
        1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
        1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,
        1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,
        1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
        1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,
        1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,
        1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,
        1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,
        1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,
        1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,
        1,36,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,
        1,42,1,42,1,43,1,43,1,43,1,43,1,43,3,43,290,8,43,1,44,4,44,293,8,
        44,11,44,12,44,294,1,44,1,44,4,44,299,8,44,11,44,12,44,300,3,44,
        303,8,44,1,45,1,45,5,45,307,8,45,10,45,12,45,310,9,45,1,46,4,46,
        313,8,46,11,46,12,46,314,1,46,1,46,0,0,47,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
        79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,1,0,5,2,0,69,69,
        101,101,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
        122,3,0,9,10,13,13,32,32,324,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
        47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
        57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
        67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,
        77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,
        87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,1,95,1,0,0,0,3,
        97,1,0,0,0,5,99,1,0,0,0,7,101,1,0,0,0,9,105,1,0,0,0,11,109,1,0,0,
        0,13,113,1,0,0,0,15,118,1,0,0,0,17,123,1,0,0,0,19,128,1,0,0,0,21,
        134,1,0,0,0,23,139,1,0,0,0,25,144,1,0,0,0,27,149,1,0,0,0,29,155,
        1,0,0,0,31,161,1,0,0,0,33,167,1,0,0,0,35,171,1,0,0,0,37,176,1,0,
        0,0,39,179,1,0,0,0,41,183,1,0,0,0,43,187,1,0,0,0,45,192,1,0,0,0,
        47,197,1,0,0,0,49,202,1,0,0,0,51,207,1,0,0,0,53,213,1,0,0,0,55,219,
        1,0,0,0,57,225,1,0,0,0,59,230,1,0,0,0,61,236,1,0,0,0,63,242,1,0,
        0,0,65,246,1,0,0,0,67,251,1,0,0,0,69,257,1,0,0,0,71,261,1,0,0,0,
        73,266,1,0,0,0,75,272,1,0,0,0,77,274,1,0,0,0,79,276,1,0,0,0,81,278,
        1,0,0,0,83,280,1,0,0,0,85,282,1,0,0,0,87,289,1,0,0,0,89,292,1,0,
        0,0,91,304,1,0,0,0,93,312,1,0,0,0,95,96,5,40,0,0,96,2,1,0,0,0,97,
        98,5,41,0,0,98,4,1,0,0,0,99,100,5,44,0,0,100,6,1,0,0,0,101,102,5,
        115,0,0,102,103,5,105,0,0,103,104,5,110,0,0,104,8,1,0,0,0,105,106,
        5,99,0,0,106,107,5,111,0,0,107,108,5,115,0,0,108,10,1,0,0,0,109,
        110,5,116,0,0,110,111,5,97,0,0,111,112,5,110,0,0,112,12,1,0,0,0,
        113,114,5,97,0,0,114,115,5,115,0,0,115,116,5,105,0,0,116,117,5,110,
        0,0,117,14,1,0,0,0,118,119,5,97,0,0,119,120,5,99,0,0,120,121,5,111,
        0,0,121,122,5,115,0,0,122,16,1,0,0,0,123,124,5,97,0,0,124,125,5,
        116,0,0,125,126,5,97,0,0,126,127,5,110,0,0,127,18,1,0,0,0,128,129,
        5,97,0,0,129,130,5,116,0,0,130,131,5,97,0,0,131,132,5,110,0,0,132,
        133,5,50,0,0,133,20,1,0,0,0,134,135,5,115,0,0,135,136,5,105,0,0,
        136,137,5,110,0,0,137,138,5,104,0,0,138,22,1,0,0,0,139,140,5,99,
        0,0,140,141,5,111,0,0,141,142,5,115,0,0,142,143,5,104,0,0,143,24,
        1,0,0,0,144,145,5,116,0,0,145,146,5,97,0,0,146,147,5,110,0,0,147,
        148,5,104,0,0,148,26,1,0,0,0,149,150,5,97,0,0,150,151,5,115,0,0,
        151,152,5,105,0,0,152,153,5,110,0,0,153,154,5,104,0,0,154,28,1,0,
        0,0,155,156,5,97,0,0,156,157,5,99,0,0,157,158,5,111,0,0,158,159,
        5,115,0,0,159,160,5,104,0,0,160,30,1,0,0,0,161,162,5,97,0,0,162,
        163,5,116,0,0,163,164,5,97,0,0,164,165,5,110,0,0,165,166,5,104,0,
        0,166,32,1,0,0,0,167,168,5,97,0,0,168,169,5,98,0,0,169,170,5,115,
        0,0,170,34,1,0,0,0,171,172,5,115,0,0,172,173,5,113,0,0,173,174,5,
        114,0,0,174,175,5,116,0,0,175,36,1,0,0,0,176,177,5,108,0,0,177,178,
        5,110,0,0,178,38,1,0,0,0,179,180,5,108,0,0,180,181,5,111,0,0,181,
        182,5,103,0,0,182,40,1,0,0,0,183,184,5,101,0,0,184,185,5,120,0,0,
        185,186,5,112,0,0,186,42,1,0,0,0,187,188,5,115,0,0,188,189,5,109,
        0,0,189,190,5,105,0,0,190,191,5,110,0,0,191,44,1,0,0,0,192,193,5,
        115,0,0,193,194,5,109,0,0,194,195,5,97,0,0,195,196,5,120,0,0,196,
        46,1,0,0,0,197,198,5,116,0,0,198,199,5,109,0,0,199,200,5,105,0,0,
        200,201,5,110,0,0,201,48,1,0,0,0,202,203,5,116,0,0,203,204,5,109,
        0,0,204,205,5,97,0,0,205,206,5,120,0,0,206,50,1,0,0,0,207,208,5,
        116,0,0,208,209,5,110,0,0,209,210,5,111,0,0,210,211,5,114,0,0,211,
        212,5,109,0,0,212,52,1,0,0,0,213,214,5,115,0,0,214,215,5,110,0,0,
        215,216,5,111,0,0,216,217,5,114,0,0,217,218,5,109,0,0,218,54,1,0,
        0,0,219,220,5,102,0,0,220,221,5,108,0,0,221,222,5,111,0,0,222,223,
        5,111,0,0,223,224,5,114,0,0,224,56,1,0,0,0,225,226,5,99,0,0,226,
        227,5,101,0,0,227,228,5,105,0,0,228,229,5,108,0,0,229,58,1,0,0,0,
        230,231,5,114,0,0,231,232,5,111,0,0,232,233,5,117,0,0,233,234,5,
        110,0,0,234,235,5,100,0,0,235,60,1,0,0,0,236,237,5,103,0,0,237,238,
        5,97,0,0,238,239,5,109,0,0,239,240,5,109,0,0,240,241,5,97,0,0,241,
        62,1,0,0,0,242,243,5,112,0,0,243,244,5,111,0,0,244,245,5,119,0,0,
        245,64,1,0,0,0,246,247,5,115,0,0,247,248,5,105,0,0,248,249,5,103,
        0,0,249,250,5,109,0,0,250,66,1,0,0,0,251,252,5,99,0,0,252,253,5,
        108,0,0,253,254,5,97,0,0,254,255,5,109,0,0,255,256,5,112,0,0,256,
        68,1,0,0,0,257,258,5,102,0,0,258,259,5,102,0,0,259,260,5,116,0,0,
        260,70,1,0,0,0,261,262,5,105,0,0,262,263,5,102,0,0,263,264,5,102,
        0,0,264,265,5,116,0,0,265,72,1,0,0,0,266,267,5,97,0,0,267,268,5,
        110,0,0,268,269,5,103,0,0,269,270,5,108,0,0,270,271,5,101,0,0,271,
        74,1,0,0,0,272,273,5,43,0,0,273,76,1,0,0,0,274,275,5,45,0,0,275,
        78,1,0,0,0,276,277,5,42,0,0,277,80,1,0,0,0,278,279,5,47,0,0,279,
        82,1,0,0,0,280,281,5,37,0,0,281,84,1,0,0,0,282,283,5,94,0,0,283,
        86,1,0,0,0,284,285,5,112,0,0,285,290,5,105,0,0,286,287,5,80,0,0,
        287,290,5,73,0,0,288,290,7,0,0,0,289,284,1,0,0,0,289,286,1,0,0,0,
        289,288,1,0,0,0,290,88,1,0,0,0,291,293,7,1,0,0,292,291,1,0,0,0,293,
        294,1,0,0,0,294,292,1,0,0,0,294,295,1,0,0,0,295,302,1,0,0,0,296,
        298,5,46,0,0,297,299,7,1,0,0,298,297,1,0,0,0,299,300,1,0,0,0,300,
        298,1,0,0,0,300,301,1,0,0,0,301,303,1,0,0,0,302,296,1,0,0,0,302,
        303,1,0,0,0,303,90,1,0,0,0,304,308,7,2,0,0,305,307,7,3,0,0,306,305,
        1,0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,92,1,
        0,0,0,310,308,1,0,0,0,311,313,7,4,0,0,312,311,1,0,0,0,313,314,1,
        0,0,0,314,312,1,0,0,0,314,315,1,0,0,0,315,316,1,0,0,0,316,317,6,
        46,0,0,317,94,1,0,0,0,7,0,289,294,300,302,308,314,1,6,0,0
    ]

class MathExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    SIN = 4
    COS = 5
    TAN = 6
    ASIN = 7
    ACOS = 8
    ATAN = 9
    ATAN2 = 10
    SINH = 11
    COSH = 12
    TANH = 13
    ASINH = 14
    ACOSH = 15
    ATANH = 16
    ABS = 17
    SQRT = 18
    LN = 19
    LOG = 20
    EXP = 21
    SMIN = 22
    SMAX = 23
    TMIN = 24
    TMAX = 25
    TNORM = 26
    SNORM = 27
    FLOOR = 28
    CEIL = 29
    ROUND = 30
    GAMMA = 31
    POWE = 32
    SIGM = 33
    CLAMP = 34
    SFFT = 35
    SIFFT = 36
    ANGL = 37
    PLUS = 38
    MINUS = 39
    MULT = 40
    DIV = 41
    MOD = 42
    POW = 43
    CONSTANT = 44
    NUMBER = 45
    VARIABLE = 46
    WS = 47

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "','", "'sin'", "'cos'", "'tan'", "'asin'", "'acos'", 
            "'atan'", "'atan2'", "'sinh'", "'cosh'", "'tanh'", "'asinh'", 
            "'acosh'", "'atanh'", "'abs'", "'sqrt'", "'ln'", "'log'", "'exp'", 
            "'smin'", "'smax'", "'tmin'", "'tmax'", "'tnorm'", "'snorm'", 
            "'floor'", "'ceil'", "'round'", "'gamma'", "'pow'", "'sigm'", 
            "'clamp'", "'fft'", "'ifft'", "'angle'", "'+'", "'-'", "'*'", 
            "'/'", "'%'", "'^'" ]

    symbolicNames = [ "<INVALID>",
            "SIN", "COS", "TAN", "ASIN", "ACOS", "ATAN", "ATAN2", "SINH", 
            "COSH", "TANH", "ASINH", "ACOSH", "ATANH", "ABS", "SQRT", "LN", 
            "LOG", "EXP", "SMIN", "SMAX", "TMIN", "TMAX", "TNORM", "SNORM", 
            "FLOOR", "CEIL", "ROUND", "GAMMA", "POWE", "SIGM", "CLAMP", 
            "SFFT", "SIFFT", "ANGL", "PLUS", "MINUS", "MULT", "DIV", "MOD", 
            "POW", "CONSTANT", "NUMBER", "VARIABLE", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "SIN", "COS", "TAN", "ASIN", "ACOS", 
                  "ATAN", "ATAN2", "SINH", "COSH", "TANH", "ASINH", "ACOSH", 
                  "ATANH", "ABS", "SQRT", "LN", "LOG", "EXP", "SMIN", "SMAX", 
                  "TMIN", "TMAX", "TNORM", "SNORM", "FLOOR", "CEIL", "ROUND", 
                  "GAMMA", "POWE", "SIGM", "CLAMP", "SFFT", "SIFFT", "ANGL", 
                  "PLUS", "MINUS", "MULT", "DIV", "MOD", "POW", "CONSTANT", 
                  "NUMBER", "VARIABLE", "WS" ]

    grammarFileName = "MathExpr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


